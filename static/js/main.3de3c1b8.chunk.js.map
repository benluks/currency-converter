{"version":3,"sources":["components/BoxCount.js","components/Dropdown.js","components/ConverterBox.js","components/FloatingCurrencies.js","App.js","index.js"],"names":["BoxCount","props","useState","dropDownOpen","setDropDownOpen","counts","selectedCount","handleCountOptionClick","closeDDMenu","filteredCounts","filter","count","className","onClick","map","index","key","Dropdown","selectedCurrency","currencyOptions","handleCurrencyClick","id","closeMenu","filteredCurrencyOptions","option","currency","ConverterBox","converterBoxClassName","handleSelectCurrency","inputChange","inputFocus","inputValue","type","value","onChange","onFocus","symbols","FloatingCurrencies","symbol","code","size","App","setCurrencyOptions","exchangeRates","setExchangeRates","boxCounts","setBoxCounts","countOfBoxes","setCountOfBoxes","converters","setConverters","activeBox","setActiveBox","values","setValues","matchingIdConverter","converter","parseInt","adjustValues","val","activeRate","quotient","useEffect","fetch","then","res","json","data","currencies","base","Object","keys","rates","boxes","i","length","push","box","Math","floor","random","visible","selectCurrency","e","target","textContent","indexOf","handleInputFocus","handleInputChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3de3c1b8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { GoTriangleUp } from \"react-icons/go\";\nimport \"./BoxCount.css\";\n\nexport default function BoxCount(props) {\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n\n  const { counts, selectedCount, handleCountOptionClick } = props;\n\n  const toggleDropDownOpen = () => {\n    setDropDownOpen(!dropDownOpen);\n  };\n\n  const closeDDMenu = () => setDropDownOpen(false);\n\n  let filteredCounts = counts.filter((count) => count !== selectedCount);\n\n  return (\n    <div className=\"box-count-container\">\n      <div className=\"selected-count\" onClick={toggleDropDownOpen}>\n        <span>{selectedCount}</span>\n        <div className={`count-arrow ${dropDownOpen ? \"down\" : \"up\"}`}>\n          <GoTriangleUp />\n        </div>\n      </div>\n      <div className={`box-count-dropdown ${dropDownOpen ? \"open\" : \"closed\"}`}>\n        {filteredCounts.map((count, index) => {\n          return (\n            <div\n              className=\"count-option\"\n              onClick={handleCountOptionClick}\n              key={index}\n            >\n              <span\n                className=\"count-option-text\"\n                onClick={closeDDMenu}\n                key={index}\n              >\n                {count}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function Dropdown(props) {\n  const {\n    selectedCurrency,\n    currencyOptions,\n    handleCurrencyClick,\n    id,\n    index,\n  } = props;\n\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n\n  const handleCurrencyOptionClick = () => setDropDownOpen(!dropDownOpen);\n\n  const closeMenu = () => setDropDownOpen(false);\n\n  let filteredCurrencyOptions = currencyOptions.filter(\n    (option) => option !== selectedCurrency\n  );\n\n  return (\n    <div className=\"dropdown-container\" key={id}>\n      <div\n        className=\"currency-option selected-currency\"\n        key={index}\n        onClick={handleCurrencyOptionClick}\n      >\n        <span className=\"currency-text selected\">{selectedCurrency}</span>\n      </div>\n      <div\n        className={`currency-dropdown ${dropDownOpen ? \"show\" : \"\"}`}\n        key={id}\n      >\n        {filteredCurrencyOptions.map((currency, index) => {\n          return (\n            <div\n              className=\"currency-option unselected\"\n              key={index}\n              id={id}\n              onClick={handleCurrencyClick}\n            >\n              <span\n                className=\"currency-text\"\n                onClick={closeMenu}\n                id={id}\n                key={index}\n              >\n                {currency}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Dropdown from \"./Dropdown\";\n\nexport default function ConverterBox(props) {\n  const {\n    currencyOptions,\n    selectedCurrency,\n    converterBoxClassName,\n    handleSelectCurrency,\n    id,\n    index,\n    inputChange,\n    inputFocus,\n    inputValue,\n  } = props;\n  return (\n    <div className={converterBoxClassName} id={id} key={id}>\n      <div className=\"search-bar\">\n        <input\n          type=\"number\"\n          value={inputValue}\n          onChange={inputChange}\n          onFocus={inputFocus}\n          id={id}\n        />\n      </div>\n      <Dropdown\n        id={id}\n        key={index}\n        selectedCurrency={selectedCurrency}\n        inputValue={inputValue}\n        currencyOptions={currencyOptions}\n        handleCurrencyClick={handleSelectCurrency}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Currency from \"react-currency-icons\";\nimport \"./FloatingCurrencies.css\";\n\nconst symbols = [\n  \"USD\",\n  \"INR\",\n  \"EUR\",\n  \"GBP\",\n  \"RUB\",\n  \"KRW\",\n  \"CRC\",\n  \"VND\",\n  \"AWG\",\n  \"PYG\",\n  \"LAK\",\n  \"ITL\",\n  \"NGN\",\n  \"MXN\",\n  \"CNY\",\n  \"ILS\",\n  \"TWD\",\n  \"KZT\",\n];\n\nfunction FloatingCurrencies() {\n  return (\n    <>\n      <div className=\"floaters\">\n        {symbols.map((symbol) => (\n          <Currency code={symbol} size=\"large\" />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default FloatingCurrencies;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport BoxCount from \"./components/BoxCount\";\nimport ConverterBox from \"./components/ConverterBox\";\nimport FloatingCurrencies from \"./components/FloatingCurrencies\";\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [exchangeRates, setExchangeRates] = useState();\n  const [boxCounts, setBoxCounts] = useState([]);\n  const [countOfBoxes, setCountOfBoxes] = useState(2);\n  const [converters, setConverters] = useState([]);\n  const [activeBox, setActiveBox] = useState();\n  const [values, setValues] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://api.exchangeratesapi.io/latest\")\n      .then((res) => res.json())\n      .then((data) => {\n        const currencies = [data.base, ...Object.keys(data.rates)];\n        const boxes = [];\n        const countOfBoxes = 2;\n        const rates = data.rates;\n        for (var i = 0; i <= currencies.length; i++) {\n          boxes.push(i);\n        }\n        setBoxCounts([...boxes]);\n        setCurrencyOptions(currencies);\n        setExchangeRates(data.rates);\n        setConverters(\n          boxes.map((box, index) => ({\n            id: Math.floor(Math.random() * 10000),\n            selectedCurrency: currencies[index],\n            visible: index < countOfBoxes ? true : false,\n          }))\n        );\n        setValues(boxes.map((box, index) => rates[currencies[index]] || 1));\n      });\n  }, []);\n\n  useEffect(() => {\n    setConverters(\n      converters.map((converter, index) => ({\n        ...converter,\n        visible: index < countOfBoxes ? true : false,\n      }))\n    );\n  }, [countOfBoxes]);\n\n  //get converter from id\n  function matchingIdConverter(id) {\n    return converters.filter((converter) => converter.id === parseInt(id))[0];\n  }\n\n  const changeCount = (e) => setCountOfBoxes(parseInt(e.target.textContent));\n\n  function adjustValues(val) {\n    const activeRate = activeBox\n      ? exchangeRates[matchingIdConverter(activeBox).selectedCurrency] || 1\n      : exchangeRates[converters[0].selectedCurrency];\n    const quotient = val / activeRate;\n\n    setValues(\n      converters.map((converter, index) => {\n        if (converter.id === activeBox) {\n          return val;\n        } else {\n          return quotient * (exchangeRates[converter.selectedCurrency] || 1);\n        }\n      })\n    );\n  }\n\n  const selectCurrency = (e) => {\n    setConverters(\n      converters.map((converter) => {\n        if (parseInt(e.target.id) === converter.id)\n          converter.selectedCurrency = e.target.textContent;\n        return converter;\n      })\n    );\n\n    const activeValue = activeBox\n      ? values[converters.indexOf(matchingIdConverter(activeBox))]\n      : values[0];\n\n    adjustValues(activeValue);\n  };\n\n  //input focus and change\n\n  const handleInputFocus = (e) => setActiveBox(parseInt(e.target.id));\n\n  const handleInputChange = (e) => {\n    adjustValues(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <FloatingCurrencies />\n      <BoxCount\n        counts={boxCounts}\n        selectedCount={countOfBoxes}\n        handleCountOptionClick={changeCount}\n      />\n      <div className=\"converter-boxes-container\">\n        {converters.map((converter, index) => (\n          <ConverterBox\n            key={converter.id}\n            id={converter.id}\n            index={index}\n            converterBoxClassName={`converter-box-container ${\n              converter.visible ? \"show\" : \"hide\"\n            }`}\n            currencyOptions={currencyOptions}\n            selectedCurrency={converter.selectedCurrency}\n            handleSelectCurrency={selectCurrency}\n            inputFocus={handleInputFocus}\n            inputChange={handleInputChange}\n            inputValue={values[index] === 0 ? \"\" : values[index]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}